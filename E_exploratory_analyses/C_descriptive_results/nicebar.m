function ax=nicebar(X,titletxt,labels)
% Version of bar that makes nice figures for categorical arrays from the
%Placebo Mega-Analysis
font_size=12;
xlabelplace=1;
xwidth=0.50;%ranges from 0(invisible line) to 1 (fills full axis)
font_name='Arial';

if iscategorical(X)
    prop = countcats(X)/length(X)*100
    labels=strcat(categories(X),':');
    % Sorting by size
    %[prop,i]=sort(prop);
    %labels=labels(i);
else
    prop=X;
end

for i=1:length(prop)
    proplabels{i}= sprintf(' %0.1f%%',prop(i));
end

%figure(); % New figure
h = bar([prop zeros(size(prop))]','stacked',...
    'FaceColor','flat');
for k = 1:size(prop,1)
    h(k).CData = k;
end

% Place category labels
yBarBorders=cumsum(prop);
yBarBorders0=[0;yBarBorders(1:end-1)];
yBarMiddle=mean([yBarBorders yBarBorders0],2);

text(repmat(xlabelplace,size(labels)),...
    yBarMiddle,...
    strcat(labels,proplabels'),...
    'HorizontalAlignment','center',...
    'VerticalAlignment','middle',...
    'FontSize',font_size,...
    'FontName',font_name)

% VERSION WITH SEPARATE TEXT OBJECTS FOR LABELS AND PERCENTAGES
% text(repmat(xlabelplace,size(labels)),...
%     yBarMiddle,...
%     labels,...
%     'HorizontalAlignment','left',...
%     'VerticalAlignment','middle',...
%     'FontSize',font_size*0.9,...
%      'FontName',font_name)
% % Place percent labels
% text(repmat(xlabelplace+0.5,size(proplabels)),...
%     yBarMiddle,...
%     proplabels,...
%     'HorizontalAlignment','left',...
%     'VerticalAlignment','middle',...
%     'FontSize',font_size*0.9,...
%      'FontName',font_name)

ax = gca;
axis([1-xwidth,1+xwidth,0,100])
set(ax,...
    'visible','off',...
    'box','off',...
    'XTick',[],...
    'YTick',[],... %0:25:100 %'color','none',...
    'FontSize',font_size,...
    'FontName',font_name) %
title(titletxt)
%xlabel(titletxt)
%ylabel('% of sample','FontSize',font_size,'FontName', font_name)
set(findall(gca, 'type', 'text'), 'visible', 'on') % Workaround to keep axis labels


% SOFT RAINBOW
% in R: library("colorspace") DANN pal <-choose_palette() DANN
% col2rgb(pal(X)) wobei X die Zahl der gewï¿½hlten Farben sein soll
% colmap=[...
% 255,197,208;...
% 253,199,197;...
% 249,202,186;...
% 242,206,178;...
% 233,209,171;...
% 223,213,168;...
% 211,216,168;...
% 199,220,171;...
% 186,222,177;...
% 174,224,186;...
% 163,226,196;...
% 156,226,207;...
% 153,226,218;...
% 155,224,228;...
% 162,222,237;...
% 173,219,244;...
% 187,215,249;...
% 201,211,252;...
% 215,207,251;...
% 228,203,249]/255

% Soft Purple-GREEN
%  colmap=[213,207,255;...
% 206,209,255;...
% 199,211,255;...
% 192,213,255;...
% 185,215,255;...
% 178,217,253;...
% 171,219,251;...
% 164,220,248;...
% 158,222,245;...
% 153,223,241;...
% 149,224,237;...
% 145,225,233;...
% 143,226,228;...
% 142,227,223;...
% 141,228,218;...
% 143,228,213;...
% 145,228,208;...
% 148,228,203;...
% 152,228,197;...
% 156,227,192]/255;



% SOFT PINK-BLUE
%  colmap=[166,192,255;...
% 173,195,255;...
% 179,199,255;...
% 186,202,255;...
% 192,206,255;...
% 198,209,255;...
% 204,213,255;...
% 210,216,252;...
% 216,220,243;...
% 223,224,233;...
% 234,221,223;...
% 246,213,219;...
% 255,205,214;...
% 255,198,210;...
% 255,190,206;...
% 255,182,202;...
% 255,175,197;...
% 255,167,194;...
% 255,159,190;...
% 255,151,186]/255;

% colmap=[215,48,39;...
% 244,109,67;...
% 253,174,97;...
% 254,224,144;...
% 255,255,191;...
% 224,243,248;...
% 171,217,233;...
% 116,173,209;...
% 69,117,180]/255;

% colmap=[...
%     178,24,43;...
%     214,96,77;...
%     244,165,130;...
%     253,219,199;...
%     247,247,247;...
%     33,102,172;...
%     67,147,195;...
%     146,197,222;...
%     209,229,240]/255;

colmap=gray(40);
colmap=fliplr(colmap(25:1:39,:));
colormap(gcf,colmap);

%fi=gcf;
end

